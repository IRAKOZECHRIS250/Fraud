{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4f69f970-c69b-4999-a201-3245e5961dc2",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-09-29 15:47:48.620 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\user\\anaconda3\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n"
     ]
    }
   ],
   "source": [
    "# app.py\n",
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import joblib\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "# Set page configuration\n",
    "st.set_page_config(\n",
    "    page_title=\"Mobile Money Fraud Detection\",\n",
    "    page_icon=\"üí∞\",\n",
    "    layout=\"wide\",\n",
    "    initial_sidebar_state=\"expanded\"\n",
    ")\n",
    "\n",
    "# Custom CSS for better styling\n",
    "st.markdown(\"\"\"\n",
    "<style>\n",
    "    .main-header {\n",
    "        font-size: 3rem;\n",
    "        color: #1f77b4;\n",
    "        text-align: center;\n",
    "        margin-bottom: 2rem;\n",
    "    }\n",
    "    .sub-header {\n",
    "        font-size: 1.5rem;\n",
    "        color: #2e86ab;\n",
    "        margin-bottom: 1rem;\n",
    "    }\n",
    "    .prediction-box {\n",
    "        padding: 20px;\n",
    "        border-radius: 10px;\n",
    "        margin: 10px 0;\n",
    "    }\n",
    "    .fraud {\n",
    "        background-color: #ffebee;\n",
    "        border: 2px solid #f44336;\n",
    "    }\n",
    "    .genuine {\n",
    "        background-color: #e8f5e8;\n",
    "        border: 2px solid #4caf50;\n",
    "    }\n",
    "    .metric-card {\n",
    "        background-color: #f0f2f6;\n",
    "        padding: 15px;\n",
    "        border-radius: 10px;\n",
    "        margin: 10px 0;\n",
    "    }\n",
    "</style>\n",
    "\"\"\", unsafe_allow_html=True)\n",
    "\n",
    "# Load model and resources\n",
    "@st.cache_resource\n",
    "def load_model():\n",
    "    try:\n",
    "        model = joblib.load('fraud_prediction.joblib')\n",
    "        return model\n",
    "    except Exception as e:\n",
    "        st.error(f\"Error loading model: {e}\")\n",
    "        return None\n",
    "\n",
    "@st.cache_resource\n",
    "def load_scaler():\n",
    "    # Since we don't have the scaler saved, we'll create a default one\n",
    "    # In practice, you should save and load the scaler like the model\n",
    "    return StandardScaler()\n",
    "\n",
    "# Feature names (must match training)\n",
    "feature_columns = [\n",
    "    'amount', 'oldbalanceOrg', 'newbalanceOrig', 'oldbalanceDest', 'newbalanceDest',\n",
    "    'balance_change_org', 'balance_change_dest', 'abs_balance_change_org',\n",
    "    'type_CASH_IN', 'type_CASH_OUT', 'type_DEBIT', 'type_PAYMENT', 'type_TRANSFER',\n",
    "    'anomaly_zero_balance', 'anomaly_balance_mismatch'\n",
    "]\n",
    "\n",
    "def preprocess_input(transaction_data, transaction_type):\n",
    "    \"\"\"Preprocess the input data to match training format\"\"\"\n",
    "    \n",
    "    # Create feature dictionary\n",
    "    features = {}\n",
    "    \n",
    "    # Basic features\n",
    "    features['amount'] = transaction_data['amount']\n",
    "    features['oldbalanceOrg'] = transaction_data['oldbalanceOrg']\n",
    "    features['newbalanceOrig'] = transaction_data['newbalanceOrig']\n",
    "    features['oldbalanceDest'] = transaction_data['oldbalanceDest']\n",
    "    features['newbalanceDest'] = transaction_data['newbalanceDest']\n",
    "    \n",
    "    # Calculated features\n",
    "    features['balance_change_org'] = features['newbalanceOrig'] - features['oldbalanceOrg']\n",
    "    features['balance_change_dest'] = features['newbalanceDest'] - features['oldbalanceDest']\n",
    "    features['abs_balance_change_org'] = abs(features['balance_change_org'])\n",
    "    \n",
    "    # Transaction type encoding\n",
    "    for ttype in ['CASH_IN', 'CASH_OUT', 'DEBIT', 'PAYMENT', 'TRANSFER']:\n",
    "        features[f'type_{ttype}'] = 1 if transaction_type == ttype else 0\n",
    "    \n",
    "    # Anomaly flags\n",
    "    features['anomaly_zero_balance'] = 1 if (features['oldbalanceOrg'] == 0 and features['amount'] > 0) else 0\n",
    "    expected_newbalance = features['oldbalanceOrg'] - features['amount']\n",
    "    features['anomaly_balance_mismatch'] = 1 if abs(features['newbalanceOrig'] - expected_newbalance) > 1 else 0\n",
    "    \n",
    "    # Create DataFrame with correct column order\n",
    "    input_df = pd.DataFrame([features])[feature_columns]\n",
    "    \n",
    "    return input_df\n",
    "\n",
    "def scale_features(input_df):\n",
    "    \"\"\"Scale features using the same scaler as training\"\"\"\n",
    "    # Note: In production, you should load the saved scaler\n",
    "    # For now, we'll use a simple min-max scaling\n",
    "    scaled_df = input_df.copy()\n",
    "    \n",
    "    # Apply log transformation to amount and balances to reduce skew\n",
    "    for col in ['amount', 'oldbalanceOrg', 'newbalanceOrig', 'oldbalanceDest', 'newbalanceDest']:\n",
    "        scaled_df[col] = np.log1p(scaled_df[col])\n",
    "    \n",
    "    # Standard scaling\n",
    "    for col in scaled_df.columns:\n",
    "        if scaled_df[col].std() > 0:\n",
    "            scaled_df[col] = (scaled_df[col] - scaled_df[col].mean()) / scaled_df[col].std()\n",
    "    \n",
    "    return scaled_df\n",
    "\n",
    "def predict_fraud(transaction_data, transaction_type, model):\n",
    "    \"\"\"Make fraud prediction\"\"\"\n",
    "    try:\n",
    "        # Preprocess input\n",
    "        input_df = preprocess_input(transaction_data, transaction_type)\n",
    "        \n",
    "        # Scale features\n",
    "        scaled_input = scale_features(input_df)\n",
    "        \n",
    "        # Make prediction\n",
    "        prediction = model.predict(scaled_input)[0]\n",
    "        probability = model.predict_proba(scaled_input)[0][1]\n",
    "        \n",
    "        return prediction, probability, input_df\n",
    "        \n",
    "    except Exception as e:\n",
    "        st.error(f\"Error making prediction: {e}\")\n",
    "        return None, None, None\n",
    "\n",
    "# Main app\n",
    "def main():\n",
    "    # Header\n",
    "    st.markdown('<div class=\"main-header\">üè¶ Mobile Money Fraud Detection System</div>', unsafe_allow_html=True)\n",
    "    \n",
    "    st.markdown(\"\"\"\n",
    "    This AI-powered system detects fraudulent transactions in real-time using machine learning. \n",
    "    Enter the transaction details below to check for potential fraud.\n",
    "    \"\"\")\n",
    "    \n",
    "    # Load model\n",
    "    model = load_model()\n",
    "    if model is None:\n",
    "        st.error(\"Failed to load the fraud detection model. Please check if 'fraud_prediction.joblib' exists.\")\n",
    "        return\n",
    "    \n",
    "    # Sidebar for additional information\n",
    "    with st.sidebar:\n",
    "        st.markdown('<div class=\"sub-header\">üìä Model Information</div>', unsafe_allow_html=True)\n",
    "        st.info(\"\"\"\n",
    "        **Model**: Logistic Regression\n",
    "        **Training Data**: PaySim Mobile Money Dataset\n",
    "        **Accuracy**: ~99.8%\n",
    "        **Precision**: ~85-90%\n",
    "        **Recall**: ~75-80%\n",
    "        \"\"\")\n",
    "        \n",
    "        st.markdown('<div class=\"sub-header\">‚ö° Quick Tips</div>', unsafe_allow_html=True)\n",
    "        st.write(\"\"\"\n",
    "        - Fraud typically occurs in **TRANSFER** and **CASH_OUT** transactions\n",
    "        - Large amounts with zero balance are suspicious\n",
    "        - Balance mismatches may indicate fraud\n",
    "        - Use threshold ~0.3 for optimal results\n",
    "        \"\"\")\n",
    "        \n",
    "        st.markdown('<div class=\"sub-header\">üîß Settings</div>', unsafe_allow_html=True)\n",
    "        fraud_threshold = st.slider(\n",
    "            \"Fraud Detection Threshold\",\n",
    "            min_value=0.1,\n",
    "            max_value=0.9,\n",
    "            value=0.3,\n",
    "            step=0.1,\n",
    "            help=\"Higher values reduce false positives but may miss some fraud\"\n",
    "        )\n",
    "    \n",
    "    # Main content area\n",
    "    col1, col2 = st.columns([1, 1])\n",
    "    \n",
    "    with col1:\n",
    "        st.markdown('<div class=\"sub-header\">üîç Transaction Details</div>', unsafe_allow_html=True)\n",
    "        \n",
    "        # Transaction type\n",
    "        transaction_type = st.selectbox(\n",
    "            \"Transaction Type\",\n",
    "            [\"CASH_IN\", \"CASH_OUT\", \"DEBIT\", \"PAYMENT\", \"TRANSFER\"],\n",
    "            help=\"Fraud is most common in TRANSFER and CASH_OUT transactions\"\n",
    "        )\n",
    "        \n",
    "        # Amount\n",
    "        amount = st.number_input(\n",
    "            \"Transaction Amount ($)\",\n",
    "            min_value=0.0,\n",
    "            value=1000.0,\n",
    "            step=100.0,\n",
    "            format=\"%.2f\",\n",
    "            help=\"Enter the transaction amount\"\n",
    "        )\n",
    "        \n",
    "        # Sender information\n",
    "        st.markdown(\"**Sender Account Information**\")\n",
    "        oldbalance_org = st.number_input(\n",
    "            \"Old Balance - Sender ($)\",\n",
    "            min_value=0.0,\n",
    "            value=5000.0,\n",
    "            step=500.0,\n",
    "            format=\"%.2f\"\n",
    "        )\n",
    "        newbalance_org = st.number_input(\n",
    "            \"New Balance - Sender ($)\",\n",
    "            min_value=0.0,\n",
    "            value=4000.0,\n",
    "            step=500.0,\n",
    "            format=\"%.2f\"\n",
    "        )\n",
    "    \n",
    "    with col2:\n",
    "        st.markdown('<div class=\"sub-header\">üë§ Receiver Information</div>', unsafe_allow_html=True)\n",
    "        \n",
    "        # Receiver information\n",
    "        oldbalance_dest = st.number_input(\n",
    "            \"Old Balance - Receiver ($)\",\n",
    "            min_value=0.0,\n",
    "            value=3000.0,\n",
    "            step=500.0,\n",
    "            format=\"%.2f\"\n",
    "        )\n",
    "        newbalance_dest = st.number_input(\n",
    "            \"New Balance - Receiver ($)\",\n",
    "            min_value=0.0,\n",
    "            value=4000.0,\n",
    "            step=500.0,\n",
    "            format=\"%.2f\"\n",
    "        )\n",
    "        \n",
    "        # Additional information\n",
    "        st.markdown(\"**Additional Details**\")\n",
    "        step = st.number_input(\n",
    "            \"Time Step (Hour)\",\n",
    "            min_value=0,\n",
    "            value=1,\n",
    "            help=\"Time step of the transaction (1 step = 1 hour)\"\n",
    "        )\n",
    "        \n",
    "        # Risk factors display\n",
    "        st.markdown(\"**Risk Factors**\")\n",
    "        zero_balance_risk = \"‚ö†Ô∏è High Risk\" if (oldbalance_org == 0 and amount > 0) else \"‚úÖ Normal\"\n",
    "        balance_mismatch = abs(newbalance_org - (oldbalance_org - amount)) > 1\n",
    "        balance_mismatch_risk = \"‚ö†Ô∏è Suspicious\" if balance_mismatch else \"‚úÖ Normal\"\n",
    "        \n",
    "        st.write(f\"Zero Balance Transaction: {zero_balance_risk}\")\n",
    "        st.write(f\"Balance Mismatch: {balance_mismatch_risk}\")\n",
    "    \n",
    "    # Prediction button\n",
    "    st.markdown(\"---\")\n",
    "    col1, col2, col3 = st.columns([1, 2, 1])\n",
    "    \n",
    "    with col2:\n",
    "        predict_button = st.button(\n",
    "            \"üöÄ Check for Fraud\",\n",
    "            use_container_width=True,\n",
    "            type=\"primary\"\n",
    "        )\n",
    "    \n",
    "    # Make prediction when button is clicked\n",
    "    if predict_button:\n",
    "        with st.spinner(\"Analyzing transaction for fraud patterns...\"):\n",
    "            # Prepare transaction data\n",
    "            transaction_data = {\n",
    "                'amount': amount,\n",
    "                'oldbalanceOrg': oldbalance_org,\n",
    "                'newbalanceOrig': newbalance_org,\n",
    "                'oldbalanceDest': oldbalance_dest,\n",
    "                'newbalanceDest': newbalance_dest\n",
    "            }\n",
    "            \n",
    "            # Make prediction\n",
    "            prediction, probability, features_df = predict_fraud(transaction_data, transaction_type, model)\n",
    "            \n",
    "            if prediction is not None:\n",
    "                # Display results\n",
    "                st.markdown(\"---\")\n",
    "                st.markdown('<div class=\"sub-header\">üéØ Fraud Detection Results</div>', unsafe_allow_html=True)\n",
    "                \n",
    "                # Determine fraud status based on threshold\n",
    "                is_fraud = probability >= fraud_threshold\n",
    "                \n",
    "                # Display prediction box\n",
    "                if is_fraud:\n",
    "                    st.markdown(\n",
    "                        f'<div class=\"prediction-box fraud\">'\n",
    "                        f'<h2>üö® FRAUD DETECTED!</h2>'\n",
    "                        f'<p><strong>Probability:</strong> {probability:.3f}</p>'\n",
    "                        f'<p><strong>Confidence:</strong> {(probability*100):.1f}%</p>'\n",
    "                        f'<p><strong>Status:</strong> This transaction appears to be fraudulent</p>'\n",
    "                        f'</div>',\n",
    "                        unsafe_allow_html=True\n",
    "                    )\n",
    "                    \n",
    "                    # Recommendations for fraud\n",
    "                    with st.expander(\"üõ°Ô∏è Recommended Actions\"):\n",
    "                        st.write(\"\"\"\n",
    "                        1. **Freeze the transaction** immediately\n",
    "                        2. **Notify security team**\n",
    "                        3. **Contact the account holder**\n",
    "                        4. **Review recent transactions**\n",
    "                        5. **Escalate to fraud department**\n",
    "                        \"\"\")\n",
    "                        \n",
    "                else:\n",
    "                    st.markdown(\n",
    "                        f'<div class=\"prediction-box genuine\">'\n",
    "                        f'<h2>‚úÖ GENUINE TRANSACTION</h2>'\n",
    "                        f'<p><strong>Probability:</strong> {probability:.3f}</p>'\n",
    "                        f'<p><strong>Confidence:</strong> {((1-probability)*100):.1f}%</p>'\n",
    "                        f'<p><strong>Status:</strong> This transaction appears to be genuine</p>'\n",
    "                        f'</div>',\n",
    "                        unsafe_allow_html=True\n",
    "                    )\n",
    "                \n",
    "                # Display feature analysis\n",
    "                with st.expander(\"üìä Feature Analysis\"):\n",
    "                    st.write(\"**Transaction Features:**\")\n",
    "                    feature_display = features_df.iloc[0].to_dict()\n",
    "                    \n",
    "                    col1, col2 = st.columns(2)\n",
    "                    \n",
    "                    with col1:\n",
    "                        st.metric(\"Amount\", f\"${amount:,.2f}\")\n",
    "                        st.metric(\"Sender Balance Change\", f\"${features_df['balance_change_org'].iloc[0]:,.2f}\")\n",
    "                        st.metric(\"Zero Balance Flag\", \"Yes\" if features_df['anomaly_zero_balance'].iloc[0] == 1 else \"No\")\n",
    "                        \n",
    "                    with col2:\n",
    "                        st.metric(\"Transaction Type\", transaction_type)\n",
    "                        st.metric(\"Balance Mismatch\", \"Yes\" if features_df['anomaly_balance_mismatch'].iloc[0] == 1 else \"No\")\n",
    "                        st.metric(\"Detection Threshold\", f\"{fraud_threshold}\")\n",
    "                \n",
    "                # Probability gauge\n",
    "                st.markdown(\"**Fraud Probability Meter:**\")\n",
    "                st.progress(float(probability))\n",
    "                st.caption(f\"Fraud Probability: {probability:.3f} (Threshold: {fraud_threshold})\")\n",
    "                \n",
    "                # Risk assessment\n",
    "                st.markdown(\"**Risk Assessment:**\")\n",
    "                if probability < 0.2:\n",
    "                    st.success(\"üü¢ LOW RISK: Transaction appears normal\")\n",
    "                elif probability < 0.5:\n",
    "                    st.warning(\"üü° MEDIUM RISK: Review recommended\")\n",
    "                else:\n",
    "                    st.error(\"üî¥ HIGH RISK: Immediate action required\")\n",
    "\n",
    "# Run the app\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0a985fa6-1f1e-4e81-b60d-8bb5f777448a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
